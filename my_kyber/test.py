from __future__ import annotations
import hashlib
import itertools
import numpy as np
import copy
#import sha3

n = 256
k = 2
q = 3329
eta1 = 3
eta2 = 2
du = 10
dv = 4
tree = [
  0, 64, 32, 96, 16, 80, 48, 112, 8, 72, 40, 104, 24, 88, 56, 120,
  4, 68, 36, 100, 20, 84, 52, 116, 12, 76, 44, 108, 28, 92, 60, 124,
  2, 66, 34, 98, 18, 82, 50, 114, 10, 74, 42, 106, 26, 90, 58, 122,
  6, 70, 38, 102, 22, 86, 54, 118, 14, 78, 46, 110, 30, 94, 62, 126,
  1, 65, 33, 97, 17, 81, 49, 113, 9, 73, 41, 105, 25, 89, 57, 121,
  5, 69, 37, 101, 21, 85, 53, 117, 13, 77, 45, 109, 29, 93, 61, 125,
  3, 67, 35, 99, 19, 83, 51, 115, 11, 75, 43, 107, 27, 91, 59, 123,
  7, 71, 39, 103, 23, 87, 55, 119, 15, 79, 47, 111, 31, 95, 63, 127
]
zetas = [17**i % q for i in range(n)]
n_inv = pow(n, q-2, q)

##### Test vector
tv_d = 0x934d60b35624d740b30a7f227af2ae7c678e4e04e13c5f509eade2b79aea77e2
tv_G = 0xb72f9bc85c0a13b9d041586fd583feb12afd5a402dd33b43543f5fa4eb436c8db18e3017096ab1466262272a3d59a6a9d2678fa9cc5db8a1888486ed4deba8fd
tv_A = 0xcf02f1089309d602e3062805680b6802f6070a0318027c00ca0af4027906ec07ca02a70287031109fc020e0bc302d808d30c8306a40747057b055d007b024108d7093007190b6e0c220abd0a3d055e09770180084d05af019e0cc10ce6024408e80aa604ca02e4029f069508500b30089909c20954000e03db07f002cf0ba70c2d084e073d0c7c08490cbf04ad03f00c080bbc0c500728036905a40078008d0aa408dd0b58015909d0033e01e80cb10a9a0336059405a205d408ba009b02e5056b001a09fc0bb404100190029c058b0b86045301c80aef0b05053a00c708c707ed07940b6b0b31090f01b300d1060904790ca10302035c036808890a47003f097b054205550ce60a47091f08b9059a02d80bd009a10b3203340c79047802020432039a056b080408190a540a75095e0a7800b502820a88063c084e060f076804b40acd0b56094e0554077c09100aa7082c0b410695058307ab0a7803330a66062302e0059109b9031f043f05ee018709fd018b00aa056e06d9026e072806da0a4a0aa509f90aa50790079606ce03a40c57071009a500c70b2d04c902890bf90b10061f075003e305ed0bc7018c05c2023003c700fb07e8037d0636039203750a9008700ac809a105c9023b0370081f07dd06df08c40ad807bb07f1043f0401008a06f4023f04160c1b01da085608cf05070638024f0b110abe006101a502150263064406ae01fa0bd4049507010cbb035a007f01710331065804d901e4039a0b6f0024051c0b8d01ff0c4505810cd506d9027807ad0a6a0aa209290a7604cb026703570066006204c208620039059206cb05ae03150bb502b002a4064d01860012027504bf041c04fc0c4101c8011b072903f50291079d0bfb0bc703220a600cdd08b5014a0c520b99078a0c84074d07380adb0b910c10091a038302a70819014d071f02e8004f07b0089700db00a00445007908e0045104c205d601c800e104ca09350507008a09910baf09b1044f07a8046f085a0a23045902bf0532066703ee01d703fa0b2c0c4e03b70bbb0aaf0cd30ab607d008d500b30c67086a09330b780a9d044c071b06d50bea07fd051a048d06d00a52015404df08e4081706d304150aed04d707d400470c6e0aa60b3e07ab023f0ab00b350c93066e0a5f013a06d30afc02590a2108380c3b04b3005304cc09e10b07021402d00937032b010b00c3064507be05c8087900780b63031b0c0c0825050d0c7102cd09fd059f0785092004930310096904450827034b07e6091c0c630bd603610ae704a204fc01100a19038b082b01a9057a059b06e303300bcc02f001280b91016d08eb005507c8095e049e0b8400b30bdc0053077c0b6d0219054e02da0bfb047703d708dc02440aab02c405260a310a3c07be002c0b8902b106cd0ce106ee076c0a36087d04e00041015b09a009580bcc003a01a605820042033106490b810b5207a9014e0bd407860b15049a06770b7c08930a5f0976093d0812029403810c2503b50ae2047e02f200e206d209310bd00372013c08b20636043301d103f30b8004e806a0038402d801a40ac10be50c82080b06ce06ce0741079709050a27000c0899079509490183004806960a7902200af301b308f905bd08670b00058705b7001b0573047904ff07fa0b9a0484020808a00ce9032003800b0001d10a660cde04a904010bc704d809f504e704bc0b8400ad035b06fe01b8037e060e060b04ca04e302970c58014d05bf09400ad909f7095f0a5d0072011e00350156014b0aa80632098e07ee0057019e081a082508c10c3309b90516049d050809d70c6b02ae06d50ca001d901e400440ca505a40258077901bc0cd7083e067f0aae016107540bb2056d03f00af60799080b0255061806f800070a0806b804420c7b09f303c906380229080e0cc40b91086105cd075b06a3083a06430b2d0a26087d0a0d0b3e01120632054f0b6d00490c66061302df0bed002108ae03c900a003010048054a09f4073401b6060b078300b007ca0bfa0b2801b70bf403b9063005b80c97059608c001e7017e0a19060c0102062c0904040a07ed0c2504e203c5073c00300ba90043013d02be0bc105cb0aa60c4500570028085609850ad00452058003530125039800e90a3c021f025a002308100cd30a68091c027d02230a0e0b070a5706830487042904db08a3094e03440cf8031c04cc0b660c76027107380b840658098c036c0cbf0b2601410953088608b108a3049d038706cc03090a8d085501f90be50a1300e7014909f801c1003800a105a2060e0b7309da04e601d80a6c0673023d084e01a30ac101950c6a062600dd0a0e086f074e003d065b05aa0c950983027b04e40975030c08fa007c0a7307e301dc019309040ab808d707d60aec0a7307f20bad0b88078e08de08f806910bf50c440a900a590aec04ed060901810c4406bc0a9f03930779055d093805700a00038c0a9800540c88074b00eb040a09ea087502f30293029d0cef093709620c7904910b4c008300250216046401db08310a9f05f206510684056d09d4017c0b610116006304cc037a07d9074c050a0aa6054f0c39042704730c99002804260b8c088e02fc0bf8011d0b600ab60626064409fb0b73089207b509a307b3049907210cc80a790bfc08f109310ae9013902e703f10cd20089079e0c8203560b1d058e00c8051901f103640b6a0bca000b054c04f109240210029b0c3009080b9c0ba00aae04b00b9e09a9013d00a9001600aa070d05cf051f07460224042506e2084e0ace04e402c204d2019b042602960380034d0329032f0c700c3604b409760c010c5e04bf07a209fe07970355084702b60b3a058006b7034408
tv_s = 0x0000ffff0000feffffffffff00000100ffff0100020000000100000000000100ffff0100feff0000ffff0100ffffffff01000000ffff000001000000ffffffff0000ffff0000000000000000fffffeffffffffff0000000000000100ffff01000100ffff01000000000000000000ffff010000000100ffff00000100ffff0000000000000000feff0000ffff010001000000ffff02000100010000000000ffff0200ffff02000100ffff0000000000000200ffff0000feff000000000300010000000100000000000100ffffffff01000100ffff000000000000feff02000000010001000000000000000200000002000000fdffffff0200020002000200ffffffff010001000000feff010001000200feffffff010001000000ffff0000ffff02000000feff0000000000000000fffffeff000000000000ffff0100feffffff0000fdff0100fffffeff00000200fffffeffffff02000000ffff00000100000002000200fffffeff00000100fffffeff0100ffffffffffffffffffff0200feff0100feffffffffffffffffffffff010001000000fefffeff00000200ffff010001000000fefffeff0000feff0100feff0000fffffffffeff00000100010000000100000001000000ffffffff0200ffff020000000000ffff020000000200ffffffff0200fdff01000100ffff020001000000ffff00000100ffff010001000200fdff0100ffff02000000ffff010000000000030000000100020000000200010001000100000001000000ffff0000feff0100ffff0000ffffffff00000000fffffeff0100000000000100000000000200010003000100ffff000001000100010002000100feff01000000ffff010000000000feff0100feff00000100fffffffffeff0100000000000100feffffff0000ffff0000ffff01000000fffffeffffffffffffffffff03000100ffff0000ffff010000000100ffff0100ffff01000000010000000200ffffffff0100fefffffffffffeffffff0200ffff01000000ffffffff0000000001000100fffffeff0000ffff010000000000ffff0100fefffeff0000ffff01000000feff00000300ffff00000100feffffff0100feff0100feff0100feff0100ffff010000000000ffff01000000feffffff0100fffffdffffffffffffff0100fefffeffffff0000ffff0100fefffffffeff0100010001000100ffffffff000001000100010000000000ffff0000feff00000100ffffffffffff01000000ffff01000200ffff0000feff02000000fefffeff0000feffffff000000000200010001000100feff0000ffff01000000ffff00000100feff02000200ffff03000000ffff000000000000ffff00000100ffff00000100ffff02000000000000000000ffff0000ffff00000300ffff0000ffff01000000000001000000
tv_e = 0xffff0000ffff01000000ffff0200ffff01000000000001000000ffff00000100feff0000ffff0000ffffffffffff01000000ffffffff010002000000ffff0100ffffffffffffffff000001000000ffff0000010002000100000001000200ffff000001000000010001000100feff00000000010001000100fffffeff0000ffff0000010001000000fefffeffffff00000200ffff0000fffffeff0000fffffffffeff03000100fffffeffffff00000000010001000100020001000100ffff0000000001000100ffff01000100ffff0100fffffeff00000000000001000000000000000000fffffffffffffffffeff01000000000002000200000000000000000001000000fefffefffeff00000200000001000100010000000100000001000100ffffffff0000fefffeff0100020001000100ffff0100ffff01000000ffff0100010001000200ffff000001000000feff0000020001000100000000000100feffffff0200fdff0200020001000100ffff010001000000ffff00000200000002000100ffffffffffff02000000feff0000000000000000feff0100010001000000ffff0100ffff000000000000ffffffff0100ffff0100ffff0100020000000000ffff01000200ffff0200ffff0000010000000100fffffeff0000ffff0000feffffff000000000100fffffffffeff00000000ffff020001000000feffffffffffffff0100ffff02000100feffffff01000000feff00000000010000000200ffff00000100ffff0200feff0000ffff0100ffff0100feffffffffff0000feff00000100feffffff000000000200ffff0000feff0100ffff0100fffffffffeff01000100020002000100ffff0300ffff000001000100ffff01000000010000000100000001000100000000000000ffff0100feff00000100ffff01000000000000000100ffff00000100ffffffff0000fdff0100ffff0000ffffffffffff00000000ffffffff0000010000000100020000000000000000000100ffff0000ffff0000feff0000feffffff01000000ffffffffffffffff00000000ffff0000ffff0100fefffeffffffffffffff00000000ffff0000feff010000000000ffff00000200fffffeffffffffff0000020002000000ffff0100010000000100ffff01000000feff000002000100ffffffff0000feff0000ffff02000100000000000000feff000000000000feff00000100000000000100ffff00000000010001000000ffff0000ffff0100ffff010001000000000000000100000000000100020001000100feff03000000030001000000010001000000010000000000ffff0100ffff02000200010000000000ffffffff0000ffff01000200fffffffffeff010001000000ffff0000000000000100020000000000ffffffff0100fefffffffeff00000200
tv_s_ = 0xd5ffddff62fdf50418fb2d0055ffcafca302dc03eafbe7032e0630fc7e011a05e0f943068d04faffa10366ff1805b5025702c201e3042e0344008cfaf4faabfa47012afd7b03c1fe79ffbf0209fc16fccefda5008e01c702bcfff9024105a2006afecdfaabfe02ffe3fe41fe46031f051efd68039b0025fbba0473fa2fffa4ffacfb4906bbfda30415069a04560464037ffb41fd58fe76fd8c02aafa85f93e0432fcf800270387fd1ffdf2039ffb10fe0001bcffc3f92902e0fd15fb89fbd60123fd61fc4efb5efb9b03b5fa59007a04f3ffbfffd4f97d067000fbfbb2022affeb03c4fb6c020d03b70249048e04cdfdbdfe7afffefa74fd98026afcb4f988ff57fb7e055ffceef98e00aaffc0fbc300fa0022004cfda3fd56040bfb31046dfa7f054c04d90277fd2d03f1055602dc045e05f0fada020e0410038bfea602abf92efa3801e7fa1201f0fb02fc6b02d0008e042efd66fe660120fe8f03c8f955051205c1fc6cff58fd4f04f5ff5efe84005ffe1e006bff69fdffff76fe9dfb04fcd8fd7cfb4b03bf00c4fea2fe3d01edfacefb53ff2d008d02e8fe41feecfaed05c0fc2b05fe056cfce0fe5b0107034b064f05e8f9d3fb3dff5206eb01dc04f700cdf9ce05d8fa5005250235fd1b069afb8eff7001bbfb4efc52fe46fcd601fbfb26fdaffc8af9a7005b02bdfca3f9fe0199fb2ffa4503190517030403c6fb3a06b5fa8cfbc3fcb805b6008205b8058cfc2f055e02f7fa4804befbf9fa3b023f02a8fa76064d061900f1ff22002a04b0fcdf04bc05ee0594fba8028ffc680677041c06b2fd6f03ea01ec0042fe31fd53fd9fff22fe9f0338fa8e059701b0fe9e03b5fe08fa91fc9a050efd7bfb88faa8fb6101d501f4fef9fa38002804550216055103e0047504c2047c04aef941027dfd44005701c40060fc8301270470ff9efe7efb1dfdc1fcf50488011606f503dbf901fe41ff3bfca602ddf994fb3b031304e5fd1300d9fa480051fe1efa28ff4bfd28fdf5f9aafcc3fe9e05a501d3fd2ffe05ff7706930235ffe3051c0390fd7efae703a4ff69002bfcda030d0032065d06a1fae2ff55014f00400014fffffd1ffb9101bc043efd0c05080512fa1b05dc03f20596fc640091fb2effa9fb200637fb42ff82005402d3006ffc56fbb2fe64fdae009a020f03030189fc52040dff6cff960300fd0cfd40fd9a034300c4fce601b3f93cffc003df024a04eafa20fb110469056afde8fd9efb41fff3fec3fb2901300493fad40154017402b3004501fa0021032a05f40240ffae0354009ffd08fb1cfde7f921063102c300a1fa3cfce80397ff8c01700698fbf00064051805c3ffa3ff520149fe4200c90230ff9d043bfb1e0421041f0299fddb032c02cc04a702a6fff7fb1affd703ac05c6fe58ff65fb96fcdcf91a063efa65061b02c5fa2e06
tv_e_ = 0x62006a03e40549fb42fb30fa1401bafce5ff26fd30048bf96904c7ffa2fc6cfb51058c03fd041d06a9fd290470fab7fec0fca5fe12ff6a06bf04aefe12fab8fc62010bfda30458052efe6406fafe14ff2afd7bfcd6f98300d3fddafec70553fb76057e0401ff6e00d501a905570103ff46067505f60429ffbefa97f9c7ff14fabb054b02b2fbf10480fb03fa2cfcdf04b8fef5fb9f00f4024e0494fdb5058505b4fa8cfae2f90b000206800612035bfe61fd47fb8b03f4fb7f007100f8f929fd0001ef01e7fa2005faff65fef5fb64fc820365000bfbc70158fcb70353fc40ffb8fcd4fb02fd13060700bb0320fd4304fcfcc0051604640110020a055c0126fe5b03dbff29015305e804e3fba8fd9a05e505f1fdddfff9fd27061100f6fb74fade05a204e70577fb94016cfb19fe70fc40fbc302beffe403c400010617025d0576fcfcfb15ff77054b0009ffa5fe3706120153fcce05b2ff9bff7ffb3c0501007201a4f96dfef3fa3706b005b804daf90bfc080164ff4bff0b067f0283fe5a01d1f9300545059efb4a02daf93efe53fcda04cdfd970206fd29ff310349fc6c04b3fb7bfd22fddcfe98f9a90351facc02fafddf03750187ff57fb41062604d1fec5f9d003c5f92ffd8afb16fcbefbb6f9c8046f0049036f03610218000d02dbffbefd81fa9105560034fd35fbb300ca045a0615ffabfe60fb48fa96fa68fa3a06e0006603ed02affbbbfa360264fcd30407039a00450455069c0475fb3afd840156fc9303f301f2fff2043c068b012ffd08fa74fa2400980222ff3d0689fec5ff34fefe03ed0076003f059e02ca003dfe0501da023506f6fb5ffde0f9e4fb55018dfe1d03ea019205e5fa50ff6401730388011ffc6502a600b2f97f0510fc5d05bc0031fbcffb6500b6fcb6ff6b04220177feeffc64024b0244fb1bff58fe96fb9ffc24fa6a0688fd66ff2e0045015efb260361ff540040ff3105dd04ecfc0605f3036f0126fb5a031a038b020f006cfe6c029700b3ff3f02140231fb71ff2b053dfd4f02d7019e0077027a0560fcccf95f042c01d7050d0135ff61fe18fbc6fcc4fa4e00b4fb7c020cfbe002ef01fdfd84faae028ff9cff9fe053dfb93fbeefae6029700ecf970fbeff98a051e0609feaf014afd2b03f8fe93f9ce02e6fcd50497fa2b05dc04f1ffab0169fa6afb8efb7c062f0242fdbe02b90595004dfb7afc6b02dc01aafed1fed7fb2203bf0235fd2efd5e06a4fcb9fd2f023101bbfdaf03e5faebfdbffeddff450614fab20022025cffcc030905c4fb9efbc8fb63ffaffdb9036000c5fbbb01ebf969fe50020dfb8401d8006e0265057afc7ffe91013efc93fef304e804befbcefb23fae402e6fa2cfd2805e3fe36059003b0fea9035106600231fbf4fe77feeefd0e04a4035d06d5f92dfada0025fc0e02150630008203
tv_As = 0xfd035201b50143fd0c00a20514050904e0027ffb5ffad90246fe69fc6bfbf002ad059604ff0558043201fb032efcb6fb75045a0548030504140422039a00bffe22fb9afe6704f2fb080180fe48fce6fddeff08febb03c700c6fd68ffd500ac01f2021ffea7032f0412028c041eff79fd5afbba00f0fe22fe2001e605d00101fd51fa9b032001b704befb38fd4c051f006ffbf200f0030d052902390186fc6605a1ff340166ff0601bd0476044cfa6dfe57fb13fe07000e04faff52fedd01050032ff68fb78fd11fe140512fc2ffc14ff2f03fdffe801b50191fa4a0218fa7aff4c0391fdaaff0ffe5a0272fa00057efacafcc4018ffef1fe6006e303effc08060e033703be02cb01340610fa2cfa59021e02a0faa600ba0115ff74fffe01900449008f0329fe4104d9fa8f05fdff0505fc03960344fcbdf9310330001f015606b5fc61ff790500ff6004b302ca01a40095fa0406a4fd7a0314fa89fdfa0365024d0140036affb8022bfd13fa2301d6fb2a01e305e2fa01020906e605720510fd4b01beffac023605b8fa4506f704cafbba0532041bfd64fee605d9fc870036053a006c0233fb5405ddfaf3fd4afe0901defff104f9fdf1ff0b00dbfaaa020afbe0014f01e5fa3003dbfc1c018bffef03b000f1fa46023200d8fc5cfaeef940fe2cfef0056a0159023afa85fb81f93bfb8dfcf303e8fe52fa58fa27faaffb17fed0fd6b01590332febffdbcfaa20031000505de0491fa140473fff0f9f2fb42017603b604960227ffab011301abfc6e0436fe240452017d05b6f9e4fbd902a6013afceafa65fb7dfac0f972fbf3fbea0147fc4cff54068403a5033d04f405bdfec5fa18fae1fbf6fe6803d5ff7d001bfb01001f00be00680068062b04c801d100feff2305330293fefeff52fbea04dd0247fc2701e000c8fe28016a06e9faabfc3a01f8f9bdfa6a069bfa4cfbd203ab011fffb2fa8100cafff4018405d500c1fe43fc92fff6fc6d00effecf0261fadaf90afda600ff040ffec6fa22fe47fd2ffec60223fd62fbca02cb00330497f9bdfcd9f92dfaefffa604dd023dfcdf014dfe770084009ffc9ff9310188fba4fba9022afa1200fc045b065500eb02c2044105f204dbfe74fd3cfa5a0404fea7fe65fafb05a4ffeb030a0132fe7dfda700270202fc4c011dfe8f032afd8d05230248050eff9601c4fa63ff40fd0803000007fbd2fda60213ff20fdc403c6057a06740412fd64fdd9023000ccfbd501cffd5f03ce032a065805490150048ffa5cfabb01d9fdd601a903a3fd9e0385fcf2f9dc04b3fa60022705e0ff36047605f705160565fd89faf4fb83fa87fbb501a80484056c0358fcf9029ff91afe4c009dfa80065bfc4703cefe5302e6fbd8fd79fd82ff4f034afd5efd56fda0051ffe7afac5fc4b069afeaffa5c002503f0fb4d037803
tv_t_nonred = 0x5f04bc0499078cf84efbd2ff2806c300c502a5f88ffe64fcaf0230fc0df85cfefe0a2208fc0a750adbfe24089ef66dfa3501ff035a026f0ad308d001acfa77fb84fca5fb0a094a0136ffe40442fbfafc08fd83fa91fd4a0199fb42fe9c06fffc68089d02a8029d04e703350a75007cfca0012f06e6034bfddefb7dff970115f70c00e605d2fca8093ef73bf77801fe0427fae7fc8f0401087706cdfe3b02eb0a55fac0fb48f91101bf0af60a5efdc8fcb8f85af9920302007900c3fed5fb2efd320057fd5ff831030e0577fa24f878fbb1066200f3fc7c03e9f601066bf6bafe040065f9acfc220461022dfe2002c1fec6f98407a50255007008ed084bfe2e0469061203e7031e071c0bf3f5d4f7f307030891f88300b3ff3c0585fff4fd04ff270631081004b8ff6dfcfb0016fe75013cff590602fca1fdf50331063603b30b2bf95dfb8e047704ab04bc016f00db06a7fb570272032c03aff908f936096602bf02e4fcd7fdabfd6203c3ffdb05b0f535fdeb0646fa4c01140c6508f5036afe1cfbee04f107d40002fd1f0035031df8940aff01b2ff6afb0f050a00d0fca209edfbe7ff55f8300475f49c019bf8d503d8fdd0086eff78ff62fb1c01d006dbf9a5fb1f05aaf45f0065f832fd49fba5fd780560fb8f05a10339ff74fafbfb1bfeeafb7100fb06af026ef7baf634fa0500e702080393fdb2f5a0f4bdf417f65104b0fed1044606e1f97af8f2fc06fd04050c087805d6fe690a0f0465f52cf9c602ccff4908890419ff9d064f0736fe9d013ef898fe76011508d8f8210262016b016efae8fe52fcf3fafffe10febdfc27004cfd2602890c7aff04011dfed801120052f935fdcbfd88044dfe25ffe1018efe89013efc23030e011a00aa09d8fd2e06ba00540002fef8feb4fc08fb5509ff03befa16fe440313016cfc850541f941f8d9fd1cf42701f20301fa7afb170509fd450213fad5000aff2507610ac1fdc703360001011cf8c70309025a0570fa46f876ff3d01b2044e00dafc53f9b8fc5a03030072ff39fd68034203ad09f7f589f638fe59fbc605b30512029efaf7fc13fb3bfbd20053f81bfc3dfc68fe93fda600aef4c0028bfe2a00530628fe55002f00d80772ff60f7acf549fe8e03c5046ef8aa07eefc16070200c5f74b008dfdfc0699f67706f9028003d5fef6ff8dfdd6008a05c50306f82102f9029d034dfb81f73d008204bdfdf1fb9bffe8083909a90140fac2037dffe9fdfbfd06038afb0e07b3fe150417042601950aa3f40efbdd0335fda205b20867f93cff4df855f98b026cfec002ec009b0121fedf0347082300e9fe61fb62fee8ff01f834003906c201ff014b01e1075df5e8f96ffa81fd660187f96f08b1fd890776ff88fc2201d305af057bf852fccdfb8e032d021efe22032000c7f889fb81fc330505027d03fa06
tv_t_red = 0x5f04bc0498fa8d054efbd2ff2806c300c502a6058ffe64fcaf0230fc0e055cfefdfd21fbfbfd74fddbfe23fb9f036dfa3501ff035a026efdd2fbd001acfa77fb84fca5fb09fc4a0136ffe40442fbfafc08fd83fa91fd4a0199fb42fe9bf9fffc67fb9d02a8029d04e70334fd75007cfca0012f06e6034bfddefb7dff970116040c00e605d2fca7fc3f043c047801fe0427fae7fc8f0400fb7706cdfe3b02eafd55fac0fb49061101befdf5fd5efdc8fcb9055b06920302007900c3fed5fb2efd320057fd600531030e0577fa250578fbb0f96200f3fc7c03ea0301066c03bafe04006606acfc220461022dfe2002c1fec6f983faa50255006ffbecfb4bfe2e0469061203e7031dfa1bfef402d504f2fa02fb92058300b3ff3c0585fff4fd04ff270630fb1004b8ff6dfcfb0016fe75013cff590602fca1fdf50331063603b2fe2c065dfb8e047704ab04bc016f00daf9a7fb570272032c03aff9090635fc6602bf02e4fcd7fdabfd6203c3ffdb05b10235fdeaf946fa4c0113ff64fbf5036afe1cfbee04f0fad40002fd1f0035031e0593fdff01b2ff6afb0f050a00d0fca1fcedfbe7ff5605300476019c019c05d503d8fdcffb6eff78ff62fb1c01cff9dbf9a5fb1f05ab015f00660532fd49fba5fd780560fb8f05a10339ff74fafbfb1bfeeafb7100faf9af026f04bb0334fa0500e702080393fdb302a101be0118035104b0fed1044606e1f97b05f2fc06fd04050bfb7805d6fe68fd0f0466022d06c602ccff48fb890419ff9cf94efa36fe9d013f0598fe760114fbd905210262016b016efae8fe52fcf3fafffe10febdfc27004cfd260288ff7aff04011dfed8011200530635fdcbfd88044dfe25ffe1018efe89013efc23030e011a00a9fcd8fd2e06ba00540002fef8feb4fc08fb54fcff03befa16fe440313016cfc850542064205d9fd1d012701f20301fa7afb170509fd450213fad5000aff24fa60fdc1fdc703360001011d05c70309025a0570fa470576ff3d01b2044e00dafc5406b8fc5a03030072ff39fd68034203acfcf8028a0338fe59fbc605b30512029efaf7fc13fb3bfbd20054051bfc3dfc68fe93fda600af01c0028bfe2a00530628fe55002f00d7fa72ff6104ad0249fe8e03c5046f05a9faeefc15fa0200c6044b008dfdfbf99a037706f9028003d5fef6ff8dfdd6008a05c50307052102f9029d034dfb82043d008204bdfdf1fb9bffe7fb38fca90140fac2037dffe9fdfbfd06038afb0dfab3fe15041704260194fda4010efbdd0335fda205b1fb68063cff4e0556068b026cfec002ec009b0121fedf0346fb2300e9fe61fb62fee8ff020534003906c201ff014b01e0fa5e02e8f96ffa81fd660187f96efbb1fd88fa76ff88fc2201d305af057c0552fccdfb8e032d021efe22032000c80589fb81fc330505027d03f9f9
tv_sk = 0xd6eccd635a4f19d80256bc9ca3c23deb783e2e16937ea151e136648db4cfa173c618552b57221ce3e43244d078f5c77a47b1a27b23bc7afc2b0a7991cf5a0a8e712cbd9c2f41250a6beb7cac3bc0e42bb446f3511f8a369b6082ba4477305ccaad9864bc3a4a15a6495644368028a4597ba78cb27a86e64333890f2783a8202a3fa018b100d1cbc49622e16a818a681d242a964ff8859b637b59a047f40cccd5d66770c08fb2b2c2eb538c6cd230b792448ee4acbebbc7ff57a798b296b596c858e85760f96e8eb0cac1380cfa20024d4aaa56c48031e4767fc544d982a72d135f56c24d5e157fdae24010c3b8a6c26a2f8713e82711f138906b020d8ef4a2676b1621fb38c9565512259c6d9ca54f64cf5f4b0860eb016caca6007db79e5890d9da874bf30bc53bba3de17ecf48c52dd028e92bb4edd75ec1b952fed596e1bb1507b3644f956ed4e8c352b61edc740fcee65cd907552562a31bb6898f0c17bcf894537b94d6c18f270a9b8b760a5be29ba4e61f9a0873459351174330c7a863b6d788c4895bb62058b8d5982fe525f88744bfa87f3bf223a967674d9601f22c022a149bdfc45bee5589a802996876471c36ab6fa31eec30b4324aa5a03cb29f93738e7519b1eb39b69b7092a9590fca8789978a61511df5ab7f38804255625151034e75244c7cf46a41e2a7447015c4109683714271fcb97fe8a1c2594f886161f5c36d022bc43c692ade56893b3341e63a01da870452fb7129cca4296a6fab49bc9e551ad40ab3067c679362c3e3c53191fa77e753ca69c092dad30032d665a237ce55f1044050c1000b8291c14b3fca500835711bc53df275996420892fac8a208683432c0854320d707985b35ba6aea0290f33108a29450edcc69613a00d1aa49a3304c5691eb4d6c3c0f32d4ab47e21184169b5a6e9fa89424cbfc49812304479d4411574320b45a10f21a352f412c4ae4305a09a801d8a6e211623c3207a3d893e98cc18709689f040561845cca42c154a2b04c912c39dc4831e14421fa2a9dbc322cc742aa78c8f1b7c3dac75bc596c8697d96d1af67365b621c6e762
tv_pk = 0x5fc44b99d7584f38cd28360cc5625a905b96af12930ed5b5fe2a82fc5aa7dc4b829fe37635f13f5af2a6d3081dad878785698a0aa914374c4e43b89f094a7892aa149a38b49c06a068d829a8d249e753a375d097a0f162e6c3a4dfe8c79761410c605ed3899a3fc44378e14f28879e8f148077e6bc3bb2ae56178c491611bf6aaf5f9a9cb9b5659223007940bcd6f8a23280a56015330e8577259587b12606f4c937ea13606cb3bb046066ad294261e2b22022bcc74678a5520570d88e4ceb42692631e7e3711c4b2fd5347f0328598340cb3c65c8f55ac02716831094cb6eb90f175b173d9c650329aaf513633633bb2ce6858e7447abc41b6fb06da8782572c332b09660366926bf529ed8caaa6243ccdb152b36ba6e47c714145c86f5b3b61de84ef1470d03fa0135e35194fa1fb3bc860fa500d1299aee88ce56054376c1199c553dd90a8d6f9cc763c811d0c66da6f851abf1056635a34a68aa7815868f153a3a5c77fcc8b1eb1807fbf62a6fb43b355700e78230943a2ba1e11b181345b11b4d46266e7b359f074a500c8857d79ba60f64262d662ccd9c8489a4c19df67437db193f95b9765181d9152262b1166f97be53497f001cb1be79024d6a2289bcc704e1b1d821015366a3cc8a484e6bc2e1f1b889f19323e3101aa09ad9ea62ba4005039bbfb5998055f93fbf77b14433116d5958422654dada1127213f02b78717a5a0454271d5b0c02517a6c27a3c3610101d753c09a25571775477dc13b2e404db4965b9a9350330c73a8a3642d39af8a23839ab85c6355b12f279f849813c280d54c5913e99b6946a0aaf012c8cab025396b255f002d837c761d42a4aeb38c5f456aaf79e162700c6b4048eca6f9a7367f90238d67bcf8e6a0d8a553c071522f9d2394e28483d2048be2a8f9c8c8e39991a41273c7eacaefc6a308be870b45b41176412954a1a0fd83d362a5ab288663dec5456b6286d0b2cecb01922fb3d473802ea2b86639bce02450339261cffb114e1e725e90677826a1688f686b29a78779c9822315dafc55753e98c8ed3221f2b3220805c8a28983355207da36fb72f9bc85c0a13b9d041586fd583feb12afd5a402dd33b43543f5fa4eb436c8d

tv_rho = tv_G >> 256
tv_sigma = tv_G & ((2**256)-1)

class Rq:
    """
    Name:        Rq
    """

    def __init__(self):
        self.coeff = [0 for x in range(n)]

    def __repr__(self):
        return str(list(map(hex, self.coeff)))

    def __getitem__(self, index):
        return self.coeff[index]

    def __eq__(self, other):
        return self.coeff == other.coeff

    def __add__(self, other):
        tmp = self.__class__()
        for i in range(n):
            tmp.coeff[i] = (self.coeff[i] + other.coeff[i]) % q
            #上の%qで値が正になるので、ref実装に合わせるため[-q/2,q/2]の範囲に戻す。
            if tmp.coeff[i] > 1664:
                tmp.coeff[i] -= q 
        return tmp

    def __matmul__(self, other: Rq) -> Rq:
        tmp = self.__class__()
        for i in range(0, n, 2):
            tmp.coeff[i] = self.coeff[i+1] * other.coeff[i+1]
            tmp.coeff[i] = tmp.coeff[i] * 17**(2*tree[i//2] + 1)
            tmp.coeff[i] += self.coeff[i] * other.coeff[i]
            tmp.coeff[i] = tmp.coeff[i] % q
            tmp.coeff[i+1] = self.coeff[i] * other.coeff[i+1]
            tmp.coeff[i+1] += self.coeff[i+1] * other.coeff[i]

        return tmp

    @classmethod
    def ntt(cls, poly_in):
        # Straight forward version
        poly_out = cls()
        for i in range(128):
            for j in range(128):
                zeta = zetas[(2*tree[i]+1)*j % n]
                poly_out.coeff[2*i] += poly_in.coeff[2*j] * zeta
                poly_out.coeff[2*i+1] += poly_in.coeff[2*j+1] * zeta
        
        # # FFT version
        # poly_out = copy.deepcopy(poly_in)
        # kk = 1
        # for len in [128, 64, 32, 16, 8, 4, 2]:
        #     for start in range(0, 256, 2*len):
        #         zeta = 17**tree[kk]
        #         kk += 1
        #         for j in range(start, start + len):
        #             t = zeta * poly_out.coeff[j + len]
        #             poly_out.coeff[j + len] = poly_out.coeff[j] - t
        #             poly_out.coeff[j] = poly_out.coeff[j] + t

        # Reduction
        for i in range(n):
            poly_out.coeff[i] %= q
            #上の%qで値が正になるので、ref実装に合わせるため[-q/2,q/2]の範囲に戻す。
            if poly_out.coeff[i] > 1664:
                poly_out.coeff[i] -= q 

            #bit_reverse = int(f'{i:08b}'[::-1], 2)

        return poly_out

    @classmethod
    def sample_uniform(cls, rho, j, i) -> Rq:
        poly = cls()
        s = hashlib.shake_128()
        s.update(bytes.fromhex(hex(rho*256*256 + j * 256 + i)[2:]))
        xof_out = bytes.fromhex(s.hexdigest(672))

        sample_cnt = 0
        for i in range(0, 672, 3):
            val = xof_out[i:i+3]
            d1 = val[0] + 256 * (val[1] & 0xf)
            d2 = (val[1] >> 4) + 16 * val[2]
            if(d1 < q and sample_cnt < n):
                poly.coeff[sample_cnt] = d1
                sample_cnt += 1
            if(d2 < q and sample_cnt < n):
                poly.coeff[sample_cnt] = d2
                sample_cnt += 1
        
        return poly

    @classmethod
    def sample_cbd(cls, sigma, nonce, eta):
        poly = cls()
        s = hashlib.shake_256()
        s.update(bytes.fromhex(hex(sigma*256 + nonce)[2:]))
        prf_out = bytes.fromhex(s.hexdigest(192))

        for i in range(64):
            t = int.from_bytes(prf_out[i*3:i*3+3], 'little')
            d = t & 0x00249249;
            d += (t>>1) & 0x00249249
            d += (t>>2) & 0x00249249

            for j in range(4):
                a = (d >> (6*j)) & 0x07
                b = (d >> (6*j + 3)) & 0x07
                poly.coeff[4*i + j] = a - b
                #負数を利用

        return poly

    def encode(self) -> int:
        val = 0
        for i in range(0, n, 2):
            elem0 = self.coeff[i]
            elem1 = self.coeff[i+1]

            if elem0 < 0:
                elem0 += q
            if elem1 < 0:
                elem1 += q

            val <<= 8
            val += elem0 & 0xff
            val <<= 8
            val += ((elem1 & 0xf) << 4) | (elem0 >> 8)
            val <<= 8
            val += elem1 >> 4

        return val

class MyKyber:
    """
    Name:        MyKyber
    """

    def __init__(self):
        pass

    def genA(self, rho) -> list[Rq][Rq]:
        A = []
        for i in range(k):
            list_temp = []
            for j in range(k):
                list_temp.append(Rq.sample_uniform(rho, j, i))
            A.append(list_temp)
        return A

    def unpack(self, arr) -> int:
        val = 0
        for poly in np.array(arr).flatten():
            for elem in poly:
                if elem < 0:
                    #ref実装のテストベクタに合わせるため16ビット符号付数に変換
                    elem += 0x10000
                val <<= 16
                # Little endian
                val += elem >> 8
                val += (elem & 0xff) << 8
        return val

    def keygen(self, d):
        s = hashlib.sha3_512()
        s.update(bytes.fromhex(hex(d)[2:]))
        Gout = f'{s.hexdigest():0128}'

        rho = int(Gout[:64], 16)
        sigma = int(Gout[64:], 16)
        assert rho == tv_rho, f'{rho} != {tv_rho}'
        assert sigma == tv_sigma, f'{sigma} != {tv_sigma}'

        A = self.genA(rho)
        assert self.unpack(A) == tv_A, f'{A} != {tv_A:x}'

        s = []
        s.append(Rq.sample_cbd(sigma, 0, 3))
        s.append(Rq.sample_cbd(sigma, 1, 3))
        assert self.unpack(s) == tv_s, f'{s} != {tv_s:x}'

        e = []
        e.append(Rq.sample_cbd(sigma, 2, 3))
        e.append(Rq.sample_cbd(sigma, 3, 3))
        assert self.unpack(e) == tv_e, f'{e} != {tv_e:x}'

        ntt_s = [Rq.ntt(s[0]), Rq.ntt(s[1])]
        assert self.unpack(ntt_s) == tv_s_, f'{ntt_s} != {tv_s_:x}'

        ntt_e = [Rq.ntt(e[0]), Rq.ntt(e[1])]
        assert self.unpack(ntt_e) == tv_e_, f'{ntt_e} != {tv_e_:x}'

        As = [Rq() for x in range(k)]
        # Matrix-vector multiplication
        for i in range(k):
            for j in range(k):
                As[i] = As[i] + (A[i][j] @ ntt_s[j])
        assert self.unpack(As) == tv_As, f'{As} != {tv_As:x}'
        
        ntt_t = [As[i] + ntt_e[i] for i in range(k)]
        assert self.unpack(ntt_t) == tv_t_red, f'{ntt_t} != {tv_t_red:x}'

        pk = (((ntt_t[0].encode() << 12*n) | ntt_t[1].encode()) << 256) | rho
        assert pk == tv_pk, f'{pk:x} != {tv_pk:x}'

        sk = ((ntt_s[0].encode() << 12*n) | ntt_s[1].encode())
        assert sk == tv_sk, f'{sk:x} != {tv_sk:x}'

        return pk, sk

aaa = MyKyber()
#aaa.keygen(0x934d60b35624d740b30a7f227af2ae7c678e4e04e13c5f509eade2b79aea77e2)
aaa.keygen(tv_d)
